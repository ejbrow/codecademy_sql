Slide 1.2 Query

SELECT MIN(subscription_start) AS Start_of_Data,
             MAX(subscription_start) AS End_of_Data
FROM subscriptions;


Slide 1.3 Queries

SELECT *
FROM subscriptions
LIMIT 100;
 
SELECT segment, COUNT(*)
FROM subscriptions
GROUP BY segment;


Slide 2.1 Query

WITH months AS (
  SELECT 
    '2017-01-01' AS first_day, 
    '2017-01-31' AS last_day 
  UNION 
  SELECT 
    '2017-02-01' AS first_day, 
    '2017-02-28' AS last_day 
  UNION 
  SELECT 
    '2017-03-01' AS first_day, 
    '2017-03-31' AS last_day), 
cross_join AS (
  SELECT *
  FROM subscriptions
  CROSS JOIN months), 
status AS (
  SELECT id, first_day AS month, 
    CASE
      WHEN (subscription_start < first_day) 
          AND (subscription_end > first_day 
          OR subscription_end IS NULL) 
      THEN 1
      ELSE 0
    END AS is_active, 
    CASE
      WHEN subscription_end BETWEEN first_day AND last_day 
      THEN 1
      ELSE 0
    END AS is_canceled 
  FROM cross_join), 
status_aggregate AS (
  SELECT month, 
               SUM(is_active) AS active, 
               SUM(is_canceled) AS canceled 
  FROM status 
  GROUP BY month) 
SELECT month, 
	1.0 * canceled / active AS churn_rate 
FROM status_aggregate;


Slide 3.1 Query

WITH months AS(
  SELECT 
    '2017-01-01' AS first_day, 
    '2017-01-31' AS last_day 
  UNION 
  SELECT 
    '2017-02-01' AS first_day, 
    '2017-02-28' AS last_day 
  UNION 
  SELECT 
    '2017-03-01' AS first_day, 
    '2017-03-31' AS last_day),
cross_join AS(
  SELECT *
  FROM subscriptions
  CROSS JOIN months),
status AS(
  SELECT id, 
	   first_day AS month, 
    CASE
      WHEN segment = 87 
                   AND (subscription_start < first_day) 
                   AND (subscription_end > first_day OR subscription_end IS NULL)
      THEN 1
      ELSE 0
    END AS is_active_87,
    CASE
      WHEN segment = 30 
	     AND (subscription_start < first_day) 
                  AND (subscription_end > first_day OR subscription_end IS NULL) 
      THEN 1
      ELSE 0
    END AS is_active_30,
    CASE
      WHEN segment = 87 
           AND subscription_end BETWEEN first_day AND last_day
      THEN 1
      ELSE 0
    END AS is_canceled_87,
    CASE
      WHEN segment = 30 
           AND subscription_end BETWEEN first_day AND last_day 
      THEN 1
      ELSE 0
    END AS is_canceled_30
  FROM cross_join),
status_aggregate AS (
  SELECT month, 
    SUM(is_active_87) AS sum_active_87,
    SUM(is_active_30) AS sum_active_30,
    SUM(is_canceled_87) AS sum_canceled_87,
    SUM(is_canceled_30) AS sum_canceled_30
  FROM status 
  GROUP BY month)
SELECT month, 
1.0 * sum_canceled_87 / sum_active_87 AS churn_rate_87, 1.0 * sum_canceled_30 / sum_active_30 AS churn_rate_30
FROM status_aggregate;


Slide 5.1 Query

WITH months AS (
  SELECT 
    '2017-01-01' AS first_day, 
    '2017-01-31' AS last_day 
  UNION 
  SELECT 
    '2017-02-01' AS first_day, 
    '2017-02-28' AS last_day 
  UNION 
  SELECT 
    '2017-03-01' AS first_day, 
    '2017-03-31' AS last_day), 
cross_join AS (
  SELECT *
  FROM subscriptions
  CROSS JOIN months), 
status AS (
  SELECT id, first_day AS month, segment, 
    CASE
      WHEN (subscription_start < first_day) 
        AND (subscription_end > first_day OR subscription_end IS NULL) 
      THEN 1
      ELSE 0
    END AS is_active, 
    CASE
      WHEN subscription_end BETWEEN first_day AND last_day 
      THEN 1
      ELSE 0
    END AS is_canceled 
  FROM cross_join), 
status_aggregate AS (
  SELECT month, segment, 
        SUM(is_active) AS active, 
    	  SUM(is_canceled) AS canceled 
  FROM status 
  GROUP BY month, segment), 
churn_rate AS (
  SELECT month, segment, 1.0 * canceled / active AS churn_rate 
  FROM status_aggregate)
SELECT month, 
    SUM(CASE WHEN segment = 87 
             THEN churn_rate 
             ELSE 0
      END) AS churn_rate_87,
    SUM(CASE WHEN segment = 30 
             THEN churn_rate 
             ELSE 0
      END) AS churn_rate_30
FROM churn_rate
GROUP BY month;
